"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(n),f=l,y=d["".concat(i,".").concat(f)]||d[f]||c[f]||a;return n?r.createElement(y,u(u({ref:t},p),{},{components:n})):r.createElement(y,u({ref:t},p))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,u=new Array(a);u[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:l,u[1]=o;for(var s=2;s<a;s++)u[s]=n[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},76647:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>u,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>i});var r=n(87462),l=(n(67294),n(3905));const a={},u="TeleportQueue",o={type:"mdx",permalink:"/TeleportQueue/",source:"@site/pages/index.md",title:"TeleportQueue",description:"GitHub Issues",frontMatter:{}},i=[],s={toc:i};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"teleportqueue"},"TeleportQueue"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/mvyasu/TeleportQueue/issues"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/github/issues/mvyasu/TeleportQueue.svg",alt:"GitHub Issues"})),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mvyasu/TeleportQueue/stargazers"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/github/stars/mvyasu/TeleportQueue.svg",alt:"GitHub Stars"})),"\n",(0,l.kt)("a",{parentName:"p",href:"https://opensource.org/licenses/MIT"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/License-MIT-blue.svg",alt:"License: MIT"}))),(0,l.kt)("p",null," A module that allows developers to quickly setup a teleport queue. Documentation is missing at the moment, but can be written if enough people desire it. Here's a small example of how it can be used:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local TELEPORT_QUEUE_TAG = "TeleportQueuePlayer"\nlocal TELEPORT_QUEUE_ATTRIBUTE = "TeleportQueue"\n\nlocal TeleportQueue = require(game.ReplicatedStorage.TeleportQueue)\n\nlocal function createTagTeleportQueue()\n    local CollectionService = game:GetService("CollectionService")\n    return TeleportQueue.new({\n        Id = game:GetService("HttpService"):GenerateGUID(),\n        PlaceId = 0,\n        \n        OnOptionUpdated = {\n            Id = function(self, newQueueId)\n                for _,player in self:GetPlayers() do\n                    player:SetAttribute(TELEPORT_QUEUE_ATTRIBUTE, newQueueId)\n                end\n            end,\n        },\n        \n        OnPlayerAdded = function(self, player)\n            player:SetAttribute(TELEPORT_QUEUE_ATTRIBUTE, self:GetOption("Id"))\n            CollectionService:AddTag(player, TELEPORT_QUEUE_TAG)\n        end,\n        \n        OnPlayerRemoved = function(self, player)\n            CollectionService:RemoveTag(player, TELEPORT_QUEUE_TAG)\n            player:SetAttribute(TELEPORT_QUEUE_ATTRIBUTE, nil)\n        end,\n        \n        AllowedWithinQueue = function(self, player)\n            local currentQueueId = player:GetAttribute(TELEPORT_QUEUE_ATTRIBUTE) \n            local isWithinDifferentQueue = CollectionService:HasTag(player, TELEPORT_QUEUE_TAG) and (currentQueueId~=nil and currentQueueId~=self:GetOption("Id"))\n            return not isWithinDifferentQueue, "Player is already within a different queue"\n        end,\n    })\nend\n\ndo --an example queue\n    local jailbreakQueue = createTagTeleportQueue()\n    jailbreakQueue:SetOptions({\n        PlaceId = 606849621,\n    })\n\n    local function onPlayerAdded(player)\n        jailbreakQueue:Add(player)\n        --if the player leaves, they will\n        --automatically be removed from the queue\n        --this includes when they teleport\n    end\n\n    local listenToPlayerAdded = game.Players.PlayerAdded:Connect(onPlayerAdded)\n    for _,player in game:GetService("Players"):GetPlayers() do\n        task.spawn(onPlayerAdded, player)\n    end\n    \n    task.delay(8, function()\n        local flushResult, teleportResult = jailbreakQueue:Flush()\n        if flushResult==TeleportQueue.FlushResult.Success then\n            print("Successfully flushed the queue!")\n            print("Here\'s the TeleportAsyncResult:", teleportResult)\n            if listenToPlayerAdded then\n                listenToPlayerAdded:Disconnect()\n                listenToPlayerAdded = nil\n            end\n            jailbreakQueue:Destroy()\n        else\n            warn("Failed to flush the queue!")\n            print("FlushResult:", flushResult)\n            if flushResult==TeleportQueue.FlushResult.Failure then\n                print("Error:", teleportResult)\n            end\n        end\n    end)\nend\n')))}p.isMDXComponent=!0}}]);