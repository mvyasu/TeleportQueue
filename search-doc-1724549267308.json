[{"title":"TeleportQueue","type":0,"sectionRef":"#","url":"/TeleportQueue/api/TeleportQueue","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#types","content":" "},{"title":"QueueOptions​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#QueueOptions","content":"&lt;/&gt; interface QueueOptions { PlaceId: number Id: string | number MaxPlayers: number? TeleportOptions: TeleportOptions? AllowedWithinQueue: (( TeleportQueue, Player ) → ( boolean, string? ))? OnPlayerRemoved: (( TeleportQueue, Player ) → nil)? OnPlayerAdded: (( TeleportQueue, Player ) → nil)? OnOptionUpdated: {( TeleportQueue, any ) → nil}? }   "},{"title":"UpdateKind​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#UpdateKind","content":"enum &lt;/&gt; interface UpdateKind { PlayersAdded: string-- Players were added PlayersRemoved: string-- Players were removed OptionsChanged: string-- Options were changed Initializing: string-- Observer is being ran for the first time } A string enum value used to describe the result of using TeleportQueue:Add().  "},{"title":"AddResult​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#AddResult","content":"enum &lt;/&gt; interface AddResult { QueueDestroyed: string-- The TeleportQueue has been destroyed QueueProcessing: string-- The TeleportQueue is flushing QueueFull: string-- The TeleportQueue is at MaxPlayers NotAllowed: string-- The AllowedWithinQueue option rejected the player PlayerBusy: string-- The player is already within TeleportQueue PlayerLeft: string-- The player isn't a child of game.Players Success: string-- The TeleportQueue added the player } A string enum value used to describe the result of using TeleportQueue:Add().  "},{"title":"FlushResult​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#FlushResult","content":"enum &lt;/&gt; interface FlushResult { QueueDestroyed: string-- The TeleportQueue has been destroyed QueueEmpty: string-- The TeleportQueue contains no players Failure: string-- The TeleportQueue failed when trying to call TeleportAsync Success: string-- The TeleportQueue was able to flush } A string enum value used to describe the result of using TeleportQueue:Flush(). "},{"title":"Properties​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#properties","content":" "},{"title":"FlushResult​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#FlushResult","content":"This item is read only and cannot be modified. Read Only enums &lt;/&gt; TeleportQueue.FlushResult: FlushResult A table containing all members of the FlushResult string enum.  "},{"title":"AddResult​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#AddResult","content":"This item is read only and cannot be modified. Read Only enums &lt;/&gt; TeleportQueue.AddResult: AddResult A table containing all members of the AddResult string enum. "},{"title":"Functions​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#new","content":"&lt;/&gt; TeleportQueue.new(startOptions: QueueOptions?) → TeleportQueue Constructs a TeleportQueue object caution You don't need to give any QueueOptions when creating a new TeleportQueue, but you should be wary of the fact that not setting an Id or PlaceId can cause unwanted results!  "},{"title":"Observe​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#Observe","content":"&lt;/&gt; TeleportQueue:Observe(observerFn: ( updateKind: UpdateKind, ...any ) → nil) → RBXScriptConnection  Observes the TeleportQueue and calls the provided observer function when a player is removed or added and when the TeleportOptions change.  "},{"title":"GetPlayers​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#GetPlayers","content":"&lt;/&gt; TeleportQueue:GetPlayers() → {Player } Returns an array of players that are in the queue  "},{"title":"SetOption​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#SetOption","content":"&lt;/&gt; TeleportQueue:SetOption( optionName: string, newValue: any, _shouldFireChange: boolean ) → boolean-- whether it successfully set the option Sets an option to a new value. If there's a function in OnOptionUpdated for the option that is changing, it will run that function as well.  "},{"title":"GetOption​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#GetOption","content":"&lt;/&gt; TeleportQueue:GetOption(optionName: string) → any?-- The value of the option   "},{"title":"SetOptions​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#SetOptions","content":"&lt;/&gt; TeleportQueue:SetOptions( newTeleportQueueOptions: QueueOptions, shouldReconcile: boolean?-- decides if reconciled with the defaults ) → nil This can be used to set multiple options at once instead of only one at a time with :SetOption(). You shouldn't ever need to use the shouldReconcile parameter since it's only used when the TeleportQueue is constructed.  "},{"title":"Remove​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#Remove","content":"&lt;/&gt; TeleportQueue:Remove( player: Player , _shouldFireChange: boolean ) → boolean-- true if the player was removed Removes the provided player from the queue if they are within the queue. If they are not within the queue, it'll do nothing.  "},{"title":"RemoveAll​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#RemoveAll","content":"&lt;/&gt; TeleportQueue:RemoveAll() → {[Player ]: boolean} Removes all the players from the queue in a while loop.  "},{"title":"Add​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#Add","content":"&lt;/&gt; TeleportQueue:Add(player: Player ) → ( AddResult, string? )-- what happened when trying to add the player If the AddResult returned is AddResult.NotAllowed, then it will return a second value and that second value is the reasoning from the AllowedWithinQueue option function  "},{"title":"Flush​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#Flush","content":"&lt;/&gt; TeleportQueue:Flush() → ( FlushResult, (TeleportAsyncResult | string)? )-- what happened when trying to flush the TeleportQueue If FlushResult is FlushResult.Success or FlushResult.Failure, it will return a second value. If it was a success, then that second value is a TeleportAsyncResult. If it was not, then it's a string describing what went wrong.  "},{"title":"Destroy​","type":1,"pageTitle":"TeleportQueue","url":"/TeleportQueue/api/TeleportQueue#Destroy","content":"&lt;/&gt; TeleportQueue:Destroy() → () Cleans up any connections that TeleportQueue uses and locks :Add(), :Flush(), :SetOption(), :SetOptions(). Afterwards, it runs :RemoveAll(). "}]